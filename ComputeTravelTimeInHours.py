# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# ComputeTravelTimeInHours.py
# Created on: 2016-10-14 15:07:00.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: ComputeTravelTimeInHours <FlowDirection> <Velocity> <Travel_Time_Raster> <Travel_Time_ASCII_Raster> 
# Description: 
# This function creates a flow travel time grid in hours from each cell to the 
# catchment outlet using the weighted FLOWLENGTH routine. 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

# Script arguments
FlowDirection = arcpy.GetParameterAsText(0)
if FlowDirection == '#' or not FlowDirection:
    FlowDirection = "Fdr" # provide a default value if unspecified

Velocity = arcpy.GetParameterAsText(1)
if Velocity == '#' or not Velocity:
    Velocity = "velocity" # provide a default value if unspecified

RoutingLayers = arcpy.GetParameterAsText(2)
if RoutingLayers == '#' or not RoutingLayers:
    RoutingLayers = "RoutingLayers" # provide a default value if unspecified

# Local variables:
tmpCelerity = "%s\\tmpCelerity" % RoutingLayers
tmpFlowLen = "%s\\tmpFlowLen" % RoutingLayers
TravelTime = "%s\\t0_h" % RoutingLayers
TravelTimeLayer = "t0_h_lyr"
TravelTimeASCIIRaster = "RoutingLayers\\t0_h.asc"

# check for existing file
if arcpy.Exists(tmpCelerity):
    arcpy.Delete_management(tmpCelerity)
if arcpy.Exists(tmpFlowLen):
    arcpy.Delete_management(tmpFlowLen)
if arcpy.Exists(TravelTime):
    arcpy.Delete_management(TravelTime)
if arcpy.Exists(TravelTimeLayer):
    arcpy.Delete_management(TravelTimeLayer)

# Process: Compute Celerity of Flow
ptrCelerity = arcpy.sa.Power( arcpy.Raster(Velocity)*5./3.,-1.)
ptrCelerity.save(tmpCelerity)

# Process: Estimate Flow Length in Seconds
arcpy.gp.FlowLength_sa(FlowDirection, tmpFlowLen, "DOWNSTREAM", tmpCelerity)

# Process: Convert Flow Length to Hours
ptrTravelTime = arcpy.Raster( tmpFlowLen ) / 3600.
ptrTravelTime.save(TravelTime)

# Process: Raster to ASCII
#arcpy.RasterToASCII_conversion(TravelTime, TravelTimeASCIIRaster)

# Add layer to the display
mxd = arcpy.mapping.MapDocument("CURRENT")
dataFrame = arcpy.mapping.ListDataFrames(mxd, "*")[0]
result = arcpy.MakeRasterLayer_management(TravelTime, TravelTimeLayer)
addLayer = result.getOutput(0)
arcpy.mapping.AddLayer(dataFrame,addLayer)

# remove temporary files
if arcpy.Exists(tmpCelerity):
    arcpy.Delete_management(tmpCelerity)
if arcpy.Exists(tmpFlowLen):
    arcpy.Delete_management(tmpFlowLen)
