# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# EstimateHydraulicRadius.py
# Created on: 2016-10-14 15:05:45.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: EstimateHydraulicRadius <ap> <bp> <FlowAccumulation> <HydraRadius> 
# Description: 
# This function will create a hydraulic radius grid based on the flow accumulation grid. Currently locked to a 2 year return flood, will look into activating other flood options in the future.  Select a flood frequency from the pop up window e.g. 2 year, 10 year or 100 year flood. Generally, a flood frequency with 2-year return period is chosen for normal floods. The 2 parameters a and b for calculating hydraulic radius can be edited in the lookup table ‘radius.dbf’ (Make sure this dbf table is in the Tables view).
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

# define hydraulic radius parameters
HydraParams = { "T2": { "ap": 0.05, "bp": 0.48 }, "T10": { "ap": 0.12, "bp": 0.52 }, "T100": { "ap": 0.18, "bp": 0.55 } }

# Script arguments
#ap = arcpy.GetParameterAsText(0)
#if ap == '#' or not ap:
#    ap = "0.05" # provide a default value if unspecified
#ap = float(ap)

#bp = arcpy.GetParameterAsText(1)
#if bp == '#' or not bp:
#    bp = "0.48" # provide a default value if unspecified
#bp = float(bp)

ReturnPeriod = arcpy.GetParameterAsText(0)
if ReturnPeriod == '#' or not ReturnPeriod:
    ReturnPeriod = "T2"
if ReturnPeriod not in HydraParams.keys():
    arcpy.AddMessage("ERROR: Invalid return period selected, must be T2, T10 or T100, for the 2, 10 or 100 year flood.  Default is T2, which will be used to compelte this step.")
    ReturnPeriod = "T2"
ap = HydraParams[ReturnPeriod]["ap"]
bp = HydraParams[ReturnPeriod]["bp"]
arcpy.AddMessage("Estimating Hydraulic Radius for a return period of %s, using parameters ap = %s, and bp = %s." % ( ReturnPeriod, ap, bp ) )

FlowAccumulation = arcpy.GetParameterAsText(1)
if FlowAccumulation == '#' or not FlowAccumulation:
    FlowAccumulation = "Fac" # provide a default value if unspecified

RoutingLayers = arcpy.GetParameterAsText(2)
if RoutingLayers == '#' or not RoutingLayers:
    RoutingLayers = "RoutingLayers" # provide a default value if unspecified

# Build file names and local variables
HydraRadius = "hydraradius"
HydraRadiusLayer = "%s_lyr" % HydraRadius
HydraRadiusPath = "%s\%s" % ( RoutingLayers, HydraRadius )
arcpy.AddMessage("Calculating land and stream slopes creating raster %s" % ( HydraRadiusPath))

# check for existing file
if arcpy.Exists(HydraRadiusPath):
    arcpy.Delete_management(HydraRadiusPath)

# check for existing layer
if arcpy.Exists(HydraRadiusLayer):
    arcpy.Delete_management(HydraRadiusLayer)

# Local variables:
Property = 100.

# Process: Get Raster CellSize
arcpy.GetRasterProperties_management(FlowAccumulation, "CELLSIZEX", "")

# Process: Calculate Hydraulic Radius
#arcpy.gp.RasterCalculator_sa("float(%ap%)*(Power((\"%Flow Accumulation (Fac)%\"+1)*float(%Property%)*float(%Property%)/1000000,float(%bp%)))", HydraRadius)
HydraRadiusPath = ( ap * arcpy.sa.Power((arcpy.sa.Raster(FlowAccumulation) + 1) * Property * Property / 1000000, bp))

# Add layer to the display
mxd = arcpy.mapping.MapDocument("CURRENT")
dataFrame = arcpy.mapping.ListDataFrames(mxd, "*")[0]
result = arcpy.MakeRasterLayer_management(HydraRadiusPath, HydraRadiusLayer)
addLayer = result.getOutput(0)
arcpy.mapping.AddLayer(dataFrame,addLayer)
