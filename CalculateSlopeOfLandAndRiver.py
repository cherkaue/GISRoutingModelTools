# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# CalculateSlopeOfLandAndRiver.py
# Created on: 2016-10-14 15:04:37.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: CalculateSlopeOfLandAndRiver <minimum_slope_threshold> <StreamNetworkRaster> <FilledDEM> <RoutingLayers> 
# Description: 
# This function will create a slope grid for both overland flow areas and river channels using different approaches.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

# Script arguments
minimum_slope_threshold = arcpy.GetParameterAsText(0)
if minimum_slope_threshold == '#' or not minimum_slope_threshold:
    minimum_slope_threshold = "0.01" # provide a default value if unspecified
minimum_slope_threshold = float(minimum_slope_threshold)

StreamNetworkRaster = arcpy.GetParameterAsText(1)
if StreamNetworkRaster == '#' or not StreamNetworkRaster:
    StreamNetworkRaster = "Str" # provide a default value if unspecified

FilledDEM = arcpy.GetParameterAsText(2)
if FilledDEM == '#' or not FilledDEM:
    FilledDEM = "Fil" # provide a default value if unspecified

RoutingLayers = arcpy.GetParameterAsText(3)
if RoutingLayers == '#' or not RoutingLayers:
    RoutingLayers = "RoutingLayers" # provide a default value if unspecified

# Build file names and local variables
LandSlope = "landslope"
LandSlopePath = "%s\%s" % ( RoutingLayers, LandSlope )
TopoStream = "topostream"
TopoStreamPath = "%s\%s" % ( RoutingLayers, TopoStream )
StreamSlope = "streamslope"
StreamSlopePath = "%s\%s" % ( RoutingLayers, StreamSlope )
TempSlope = "temp_ls_slope"
TempSlopePath = "%s\%s" % ( RoutingLayers, TempSlope )
LandRiverSlope = "LandRiverSlope"
LandRiverSlopeLayer = "%s_lyr" % LandRiverSlope
LandRiverSlopePath = "%s\%s" % ( RoutingLayers, LandRiverSlope )
arcpy.AddMessage("Calculating land and stream slopes creating raster %s" % ( LandRiverSlopePath))

# check for existing file
if arcpy.Exists(LandSlopePath):
    arcpy.Delete_management(LandSlopePath)
if arcpy.Exists(TopoStreamPath):
    arcpy.Delete_management(TopoStreamPath)
if arcpy.Exists(StreamSlopePath):
    arcpy.Delete_management(StreamSlopePath)
if arcpy.Exists(TempSlopePath):
    arcpy.Delete_management(TempSlopePath)
if arcpy.Exists(LandRiverSlopePath):
    arcpy.Delete_management(LandRiverSlopePath)

# check for existing layer
if arcpy.Exists(LandRiverSlopeLayer):
    arcpy.Delete_management(LandRiverSlopeLayer)

# Process: Calculate Land Surface Slope
arcpy.gp.Slope_sa(FilledDEM, LandSlopePath, "PERCENT_RISE", "1")

# Process: Mask DEM to Streams
#arcpy.gp.RasterCalculator_sa("FilledDEM * \"%Stream Network Raster (Str)%\"", topostream)
TopoStreamPath = arcpy.sa.Raster(FilledDEM) * arcpy.sa.Raster(StreamNetworkRaster)

# Process: Calculate Stream Channel Slope
arcpy.gp.Slope_sa(TopoStreamPath, StreamSlopePath, "PERCENT_RISE", "1")

# Process: Merge Stream Channel and Land Surface Slope
#arcpy.gp.RasterCalculator_sa("Con(IsNull(\"%Stream Network Raster (Str)%\"),\"%landslope%\",\"%streamslope%\")", temp_ls_slope)
TempSlope = arcpy.sa.Con(arcpy.sa.IsNull(StreamNetworkRaster),LandSlopePath,StreamSlopePath)

# Process: Filter Minimum Slopes
#arcpy.gp.RasterCalculator_sa("Con(\"%temp_ls_slope%\" <= float(%minimum slope shreshold%),float(%minimum slope shreshold%),\"%temp_ls_slope%\")", LandRivSlope)
LandRiverSlopePath = arcpy.sa.Con(TempSlope <= minimum_slope_threshold, minimum_slope_threshold,TempSlope)

# Add layer to the display
mxd = arcpy.mapping.MapDocument("CURRENT")
dataFrame = arcpy.mapping.ListDataFrames(mxd, "*")[0]
result = arcpy.MakeRasterLayer_management(LandRiverSlopePath, LandRiverSlopeLayer)
addLayer = result.getOutput(0)
arcpy.mapping.AddLayer(dataFrame,addLayer)

# remove temporary layer files
if arcpy.Exists(LandSlopePath):
    arcpy.Delete_management(LandSlopePath)
if arcpy.Exists(TopoStreamPath):
    arcpy.Delete_management(TopoStreamPath)
if arcpy.Exists(StreamSlopePath):
    arcpy.Delete_management(StreamSlopePath)
if arcpy.Exists(TempSlopePath):
    arcpy.Delete_management(TempSlopePath)

