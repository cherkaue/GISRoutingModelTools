# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# CalculateFlowVelocity.py
# Created on: 2016-10-14 15:06:31.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: CalculateFlowVelocity <LandRiverSlope> <HydraulicRadius> <ManningsN> <maxVelo> <minVelo> <velocity> 
# Description: 
# This function creates a flow velocity grid based on the Manningâ€™s n, hydraulic 
# radius and slope grid.  As these were computed differently for channel and
# hillslopes, the velocity raster will reflect the differences in flow regieme.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

# Script arguments
LandRiverSlope = arcpy.GetParameterAsText(0)
if LandRiverSlope == '#' or not LandRiverSlope:
    LandRiverSlope = "LandRivSlope" # provide a default value if unspecified

HydraulicRadius = arcpy.GetParameterAsText(1)
if HydraulicRadius == '#' or not HydraulicRadius:
    HydraulicRadius = "HydraRadius" # provide a default value if unspecified

ManningsN = arcpy.GetParameterAsText(2)
if ManningsN == '#' or not ManningsN:
    ManningsN = "ManningGrid" # provide a default value if unspecified

maxVelo = arcpy.GetParameterAsText(3)
if maxVelo == '#' or not maxVelo:
    maxVelo = "3.0" # provide a default value if unspecified
maxVelo = float(maxVelo)

minVelo = arcpy.GetParameterAsText(4)
if minVelo == '#' or not minVelo:
    minVelo = "0.005" # provide a default value if unspecified
minVelo = float(minVelo)

RoutingLayers = arcpy.GetParameterAsText(5)
if RoutingLayers == '#' or not RoutingLayers:
    RoutingLayers = "RoutingLayers" # provide a default value if unspecified

# Local variables:
tmpVelo = "%s\\tmpVelo" % RoutingLayers
tmpVelo1 = "%s\\tmpVelo1" % RoutingLayers
Velocity = "Velocity"
VelocityLayer = "%s_lyr" % Velocity
VelocityPath = "%s\\%s" % ( RoutingLayers, Velocity )
arcpy.AddMessage("Calculating flow velocity raster %s" % ( VelocityPath))


# remove existing temporary and output files
if arcpy.Exists(tmpVelo):
    arcpy.Delete_management(tmpVelo)
if arcpy.Exists(tmpVelo1):
    arcpy.Delete_management(tmpVelo1)
if arcpy.Exists(VelocityLayer):
    arcpy.Delete_management(VelocityLayer)
if arcpy.Exists(VelocityPath):
    arcpy.Delete_management(VelocityPath)

# Process: Estimate Velocity
ptrVelo = arcpy.sa.Power( arcpy.Raster(ManningsN), -1.) 
ptrVelo = ptrVelo * arcpy.sa.Power( arcpy.Raster(HydraulicRadius),2./3.) 
ptrVelo = ptrVelo * arcpy.sa.SquareRoot( arcpy.Raster(LandRiverSlope)/100.)
ptrVelo.save( tmpVelo )

# Process: Filter for Minimum Velocity
#arcpy.gp.RasterCalculator_sa("Con(\"%tmpVelo%\" < float(%minVelo%),float(%minVelo%),\"%tmpVelo%\")", tmpVelo1)
ptrVelo1 = arcpy.sa.Con(arcpy.Raster(tmpVelo) < minVelo, minVelo, tmpVelo )
ptrVelo1.save( tmpVelo1 )

# Process: Filter for Maximum Velocity
#arcpy.gp.RasterCalculator_sa("Con(\"%tmpVelo1%\" >float(%maxVelo%),float(%maxVelo%),\"%tmpVelo1%\")", Velocity)
ptrVelocity = arcpy.sa.Con( arcpy.Raster(tmpVelo1) > maxVelo, maxVelo, tmpVelo1 )
ptrVelocity.save( VelocityPath )

# Add layer to the display
mxd = arcpy.mapping.MapDocument("CURRENT")
dataFrame = arcpy.mapping.ListDataFrames(mxd, "*")[0]
result = arcpy.MakeRasterLayer_management(VelocityPath, VelocityLayer)
addLayer = result.getOutput(0)
arcpy.mapping.AddLayer(dataFrame,addLayer)

# clean up temporary files
if arcpy.Exists(tmpVelo):
    arcpy.Delete_management(tmpVelo)
if arcpy.Exists(tmpVelo1):
    arcpy.Delete_management(tmpVelo1)
