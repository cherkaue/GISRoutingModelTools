# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# CalculateWatershedRoutingStatistics.py
# Created on: 2016-10-14 15:07:24.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: CalculateWatershedRoutingStatistics <TravelTime> <Watersheds> <SimulationZones> <ZoneField> <OutputPath> <SampleExtent> 
# Description: 
# Extract routing model statistics for each watershed.  This uses the Batch 
# Watershed polygon file from ArcHydro.  Travel times for the current watershed 
# are adjusted by subtracting the travel time from the current outlet to the 
# basin outlet for all pixels.  This sets the outlet travel time to zero.  
# Any values that end up negative (because they drain out of the watershed) are 
# set to No Data. Solution elements (zones) with less than "Thres" percent of 
# the zone contributing to watershed streamflow are excluded.  Then the mean 
# and standard deviation of travel times are found for each Zone.  Output for 
# each defined watershed is a table with zonal statistics.  You will need the 
# mean and standard deviation from the table to create routing model input 
# files.  The mask file can be created by setting any zones with values to '1' 
# to indicate that they should be included.  Zones contributing less than 
# "Thres" have already been removed from the output zonal statistics table.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

#TravelTime = "F:\Workspace\INCCIA\RoutingSetup\RoutingLayers\t0_h"
#Watersheds = "F:\Workspace\INCCIA\RoutingSetup\INCCIAARCHYDRO_300M.GDB\Layers\Watershed"
#SimulationZones = "F:\Workspace\INCCIA\RoutingSetup\INCCIARouting_Projected.gdb\FullVicCellPolygons"
#ZoneField = "gridcode"
#FractionThreshold = "0.01"
#RoutingLayers = "F:\Workspace\INCCIA\RoutingSetup\RoutingLayers"

# Script arguments
TravelTime = arcpy.GetParameterAsText(0)
if TravelTime == '#' or not TravelTime:
    TravelTime = "t0_h" # provide a default value if unspecified

Watersheds = arcpy.GetParameterAsText(1)
if Watersheds == '#' or not Watersheds:
    Watersheds = "Watershed" # provide a default value if unspecified

SimulationZones = arcpy.GetParameterAsText(2)
if SimulationZones == '#' or not SimulationZones:
    SimulationZones = "ZonalPolygons" # provide a default value if unspecified

ZoneField = arcpy.GetParameterAsText(3)
if ZoneField == '#' or not ZoneField:
    ZoneField = "gridcode" # provide a default value if unspecified

FractionThreshold = arcpy.GetParameterAsText(4)
if FractionThreshold == "#" or not FractionThreshold:
    FractionThreshold = "0.01" # smallest fraction of simulation zone that should be included in routing    
FractionThreshold = float(FractionThreshold)

RoutingLayers = arcpy.GetParameterAsText(5)
if RoutingLayers == '#' or not RoutingLayers:
    RoutingLayers = "RoutingLayers" # provide a default value if unspecified

# set analysis environment
arcpy.env.Workspace = RoutingLayers
arcpy.env.Extent = TravelTime
arcpy.env.CellSize = TravelTime

# Local variables:
HydroIDField = "HydroID"

# local filenames
tmpWsTtime = "tmpWsTtime" 
tmpWsTtimePath = "%s\%s" % ( RoutingLayers, tmpWsTtime )
tmpCorrWsTt = "tmpCorrWsTt"
tmpCorrWsTtPath = "%s\%s" % ( RoutingLayers, tmpCorrWsTt )
CorrWsTt = "tmp_T0_1"
CorrWsTtPath = "%s\%s" % ( RoutingLayers, CorrWsTt )
tmpWsOnes = "tmpWsOnes"
tmpWsOnesPath = "%s\%s" % ( RoutingLayers, tmpWsOnes )
tmpWsZoneSums = "tmpWsZoneSums"
tmpWsZoneSumsPath = "%s\%s" % ( RoutingLayers, tmpWsZoneSums )
tmpConst = "tmpConst"
tmpConstPath = "%s\%s" % ( RoutingLayers, tmpConst )
tmpZoneSums = "tmpZoneSums"
tmpZoneSumsPath = "%s\%s" % ( RoutingLayers, tmpZoneSums )
MaskCorrWsTt = "MaskCorrWsTt"
MaskCorrWsTtPath = "%s\%s" % ( RoutingLayers, MaskCorrWsTt )

# check for existing file
if arcpy.Exists(tmpWsTtimePath):
    arcpy.Delete_management(tmpWsTtimePath)
if arcpy.Exists(tmpCorrWsTtPath):
    arcpy.Delete_management(tmpCorrWsTtPath)
if arcpy.Exists(CorrWsTtPath):
    arcpy.Delete_management(CorrWsTtPath)
if arcpy.Exists(tmpWsOnesPath):
    arcpy.Delete_management(tmpWsOnesPath)
if arcpy.Exists(tmpWsZoneSumsPath):
    arcpy.Delete_management(tmpWsZoneSumsPath)
if arcpy.Exists(tmpConstPath):
    arcpy.Delete_management(tmpConstPath)
if arcpy.Exists(tmpZoneSumsPath):
    arcpy.Delete_management(tmpZoneSumsPath)
if arcpy.Exists(MaskCorrWsTtPath):
    arcpy.Delete_management(tmpWsZoneSumsPath)
    
# Process: Iterate Feature Selection
with arcpy.da.SearchCursor(Watersheds, HydroIDField) as cursor:
    for row in cursor:
        # get current watershed Hydro ID value
        HydroID = int(row[0])
        arcpy.AddMessage("Processing Watershed ID %i" % HydroID)

        # build filenames for current watershed
        FractValue = "%s\Fract_%03i" % ( RoutingLayers, HydroID )
        ZonalRoutingMask = "%s\F0_%03i" % ( RoutingLayers, HydroID )
        ZonalStatsValue = "%s\ZonalStats_%03i" % ( RoutingLayers, HydroID )
        OutputTable = "ZonalStats_%03i" % ( HydroID )
        
        # remove files if they exist
        if arcpy.Exists(FractValue):
            arcpy.Delete_management(FractValue)
        if arcpy.Exists(ZonalRoutingMask):
            arcpy.Delete_management(ZonalRoutingMask)
        if arcpy.Exists(ZonalStatsValue):
            arcpy.Delete_management(ZonalStatsValue)
        if arcpy.Exists("%s\\%s" % ( RoutingLayers, OutputTable )):
            arcpy.Delete_management( "%s\\%s" % (RoutingLayers, OutputTable))

        # Process: Extract by Mask
        #arcpy.gp.ExtractByMask_sa(TravelTime, HydroID, tmpWsTtimePath)
        tmpWsTtimePath = arcpy.sa.ExtractByMask(TravelTime, HydroID)

        # Process: Get Minimum Travel Time
        tmpMinTravelPath = arcpy.GetRasterProperties_management( tmpWsTtimePath, "MINIMUM" )
        MinimumTravelTime = float( tmpMinTravelPath.getOutput(0) )

        # Process: Raster Calculator
        #arcpy.gp.RasterCalculator_sa( arcpy.Raster(tmpWsTtimePath) - float(MinimumTravelTime), tmpCorrWsTtPath)
        tmpCorrWsTtPath = arcpy.sa.Minus( tmpWsTtimePath, float(MinimumTravelTime) )

        # Process: Con
        #arcpy.sa.Con(tmpCorrWsTtPath, tmpCorrWsTtPath, CorrWsTtPath, "", "VALUE >= 0")
        CorrWsTtPath = arcpy.sa.Con( tmpCorrWsTtPath >= 0, tmpCorrWsTtPath, "")

        # Process: Build mask for current watershed
        #arcpy.gp.Con_sa(CorrWsTtPath, 1, tmpWsOnesPath, "", "VALUE > 0")
        tmpWsOnesPath = arcpy.sa.Con(CorrWsTtPath > 0, 1, "")

        # Process: Calculate how many routing cells are in each vic simulation cell
        #arcpy.gp.ZonalStatistics_sa(SimulationZones, ZoneField, tmpWsOnesPath, tmpWsZoneSumsPath, "SUM", "DATA")
        tmpWsZoneSumsPath = arcpy.sa.ZonalStatistics(SimulationZones, ZoneField, tmpWsOnesPath, "SUM", "DATA")

        # Process: Build mask for the entire defined domain
        tmpConstPath = arcpy.sa.Con(arcpy.Raster(TravelTime) > 0, 1, "")

        # Process: Calculate how many routing cells are in the entire vic model domain
        #arcpy.gp.ZonalStatistics_sa(SimulationZones, ZoneField, tmpConstPath, tmpZoneSumsPath, "SUM", "DATA")
        tmpZoneSumsPath = arcpy.sa.ZonalStatistics(SimulationZones, ZoneField, tmpConstPath, "SUM", "DATA")

        # Process: Detremin the fraction of cells in the current rounting model versus all of those in the vic simulation cell
        #arcpy.gp.Divide_sa(tmpWsZoneSumsPath, tmpZoneSumsPath, FractValue)
        FractValue = arcpy.sa.Divide(tmpWsZoneSumsPath, tmpZoneSumsPath)

        # Process: Remove vic simulation cells from routing that don't contribute a minimum amount to output streamflow
        #arcpy.gp.Con_sa(FractValue, 1, ZonalRoutingMask, "", "VALUE >= %s" % FractionThreshold )
        ZonalRoutingMask = arcpy.sa.Con(FractValue >= FractionThreshold, 1, "")

        # Process: Mask the travel times to just those vic simulation cells that are being used for the current watershed
        #arcpy.gp.Con_sa(ZonalRoutingMask, CorrWsTtPath, MaskCorrWsTtPath, "", "VALUE = 1")
        MaskCorrWsTtPath = arcpy.sa.Con(ZonalRoutingMask == 1, CorrWsTtPath, "")

        # Process: Calculate all zonal statistics of travel time for the remaining vic simulation cells
        #OutputTable = arcpy.gp.ZonalStatisticsAsTable_sa(SimulationZones, ZoneField, MaskCorrWsTtPath, ZonalStatsValue, "DATA", "ALL")
        OutputTable = arcpy.sa.ZonalStatisticsAsTable(SimulationZones, ZoneField, MaskCorrWsTtPath, ZonalStatsValue, "DATA", "ALL")

        # Process: Output table as DBase file for extrrnal processing
        arcpy.TableToDBASE_conversion(OutputTable, RoutingLayers)

       
# clean up temporary files
if arcpy.Exists(tmpWsTtimePath):
    arcpy.Delete_management(tmpWsTtimePath)
if arcpy.Exists(tmpCorrWsTtPath):
    arcpy.Delete_management(tmpCorrWsTtPath)
if arcpy.Exists(CorrWsTtPath):
    arcpy.Delete_management(CorrWsTtPath)
if arcpy.Exists(tmpWsOnesPath):
    arcpy.Delete_management(tmpWsOnesPath)
if arcpy.Exists(tmpWsZoneSumsPath):
    arcpy.Delete_management(tmpWsZoneSumsPath)
if arcpy.Exists(tmpConstPath):
    arcpy.Delete_management(tmpConstPath)
if arcpy.Exists(tmpZoneSumsPath):
    arcpy.Delete_management(tmpZoneSumsPath)
if arcpy.Exists(MaskCorrWsTtPath):
    arcpy.Delete_management(MaskCorrWsTtPath)
